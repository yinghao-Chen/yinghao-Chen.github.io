<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>弄懂JVM</title>
      <link href="/2018/12/30/nong-dong-jvm/"/>
      <url>/2018/12/30/nong-dong-jvm/</url>
      
        <content type="html"><![CDATA[<h3><span id="1class-loader类加载器">1.class Loader（类加载器）</span></h3><p>我们编写的java文件，编辑器会编译成<font color="#0099ff" face="微软雅黑">*.class</font>的字节码文件；在我们执行代码时，会由<font color="#0099ff" face="微软雅黑">类加载器</font>将文件加载到运行时数据区（内存）中去执行。<br>我们先来看一段简单的代码：<br><pre><code>public class Test {public static void main(String[] args) {System.out.println(Test.class.getClassLoader());}}</code></pre><br>执行将打印如下内容：<br><img src="/2018/12/30/nong-dong-jvm/images/image2.PNG" alt="打印" title="打印"><br>打印出了加载这个类所用到的类加载器为<font color="#0099ff" face="微软雅黑">AppClassLoader</font>，那么它具体是怎么加载的呢,加载过程是什么样的呢？<br>打开命令行工具，cd进入Test.class所在目录，执行java指令:<font color="#0099ff" face="微软雅黑">java -verbose test.Test</font><br><img src="/2018/12/30/nong-dong-jvm/images/3.png" alt="打印" title="打印"><br>有没有一种很熟悉的感觉？对，首先打开了rt.jar，然后就去加载了Object类…<br>回到最开始执行代码打印的sun.misc.Launcher$AppClassLoader@73d16e93，在命令行中找到它:<br><img src="/2018/12/30/nong-dong-jvm/images/4.png" alt="打印" title="打印"><br>可以看出，加载了这么几个类 启动类加载器（bootstrapClassLoader）、扩展类加载器(ExtClassLoader)、系统类加载器(AppClassLoader)<br>在通过一段代码，探索一下他们的关系：<br><pre><code>public class Test {public static void main(String[] args) {ClassLoader c = Test.class.getClassLoader();while(c != null) {System.out.println(c);c = c.getParent();}}}</code></pre><br>打印如下：<br><img src="/2018/12/30/nong-dong-jvm/images/6.png" alt="打印" title="打印"><br>很明显，AppClassLoader的上级为ExtClassLoader（<font color="#0099ff" face="微软雅黑">注意：不是继承关系，只是一种组合关系</font>）。那么ExtClassLoader的上级加载器是什么呢？  来看一下源码：<br><img src="/2018/12/30/nong-dong-jvm/images/5.png" alt="打印" title="打印"><br><img src="/2018/12/30/nong-dong-jvm/images/7.png" alt="打印" title="打印"><br>上面这段代码，<font color="#0099ff" face="微软雅黑">synchronized</font>保证了只有一个线程进行加载，然后loadclass方法是一个递归方法，一直找到最上层加载器才去进行加载（双亲委派机制），然后找不到上级的时候，最终去找到了一个<font color="#0099ff" face="微软雅黑">native</font>本地方法（根据操作系统不同，实现也不一样，一般为c++实现的，是java实现跨平台的原因），即我们的启动类加载器。<br>现在很清楚了，来总结一下，用下面的一张图进行说明：<br><img src="/2018/12/30/nong-dong-jvm/images/8.png" alt="打印" title="打印"><br>启动类加载器，负责将JAVA_HOME/lib下的类库（如rt.jar）加载到内存中，这是一个本地私有方法，不同通过程序引用去调用执行。<br>扩展类加载器，负责将JAVA_HOME/lib/ext或者由系统变量java.ext.dir指定位置的类库加载到内存。<br>应用程序类加载器（即系统类加载器，getSystemClassLoader()的返回值），负责将classpath类路径下的类加载到内存。  </p><p>双亲委派机制： 加载时，自上而下；检查时，自下而上。  这也是java虚拟机为了保证程序执行安全的一种方式。下面我来简单解释一下：<br>来看一段代码，新建一个名称为List的类：<br><img src="/2018/12/30/nong-dong-jvm/images/9.png" alt="打印" title="打印"><br>这段代码虽然可以编译通过，但是却不能够正常执行。就是因为是自上而下加载的，List已经由上级加载器 加载过了（rt.jar中），就不能进行加载了。保证了在写出了不安全的程序时，JDK不让它执行。  </p><h3><span id="2runtime-data-area运行时数据区">2.Runtime Data Area（运行时数据区）</span></h3><p>借助一张图来进行说明：<br><img src="/2018/12/30/nong-dong-jvm/images/10.png" alt="打印" title="打印">  </p><ol><li>堆。 对于大多数应用程序来说，堆是java虚拟机管理的内存中最大的一块。 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。 此区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。 如果堆中没有内存完成实例分配，并且堆也无法再扩展时，就会抛出OutOfMemoryError异常。  </li><li>方法区。 此区域同样是线程共享的区域。 被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等都存储在这里。 当方法去无法满足内存分配需求时，会抛出OutOfMemoryError异常。  </li><li>程序计数器。 是一块较小的内存空间，当前线程所执行的字节码行号指示器。<br>进去cmd,执行指令： javap -c Test<br><img src="/2018/12/30/nong-dong-jvm/images/11.png" alt="打印" title="打印"><br>可以看到，编译后的每一条执行指令都有对应一个编号。 就是指向执行指令的地址，执行后做累加操作。使得程序按照一定的步骤去执行。  </li><li>栈。 每当启动一个新线程的时候，java虚拟机都会为它分配一个栈。java以栈帧为单位来保存线程的运行状态。虚拟机只会为栈执行两种操作：以栈帧为单位的入栈和出栈。  </li></ol><p>最后，下面这张图对于大家进行jvm调优肯定会有帮助的：<br><img src="/2018/12/30/nong-dong-jvm/images/12.png" alt="打印" title="打印"><br><img src="/2018/12/30/nong-dong-jvm/images/13.png" alt="打印" title="打印">  </p><p><img src="/2018/12/30/nong-dong-jvm/images/14.png" alt="打印" title="打印"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识python-爬取网页文字和图片</title>
      <link href="/2018/12/08/chu-shi-python-pa-qu-wang-ye-wen-zi-he-tu-pian/"/>
      <url>/2018/12/08/chu-shi-python-pa-qu-wang-ye-wen-zi-he-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>学习了一下用python爬取网络上的文字和图片，在此记录一下。  </p><h3><span id="1下载笔趣看网页上的小说">1.下载“<font color="#0099ff" face="微软雅黑"><a href="https://www.biqukan.com/" target="_blank" rel="noopener">笔趣看</a></font>”网页上的小说</span></h3><p>代码如下：<br><pre><code># __*__ coding:UTF-8 __*__import requestsfrom bs4 import BeautifulSoup&quot;&quot;&quot;下载 笔趣看 小说&quot;&quot;&quot;class DownloadBook(object):    def __init__(self):        self.server = &#39;https:&#x2F;&#x2F;www.biqukan.com&#39;        self.target = &#39;https:&#x2F;&#x2F;www.biqukan.com&#x2F;20_20289&#x2F;&#39; # 书目在网站的地址        self.name = &#39;调教大宋.txt&#39;  # 书名        self.count = 0     # 章节数        self.names = []     # 章节名        self.urls = []      # 章节链接    &quot;&quot;&quot;    获取所有章节的下载链接    &quot;&quot;&quot;    def get_all_down_url(self):        req = requests.get(url=self.target)        bf = BeautifulSoup(req.text)        texts = bf.find_all(&#39;div&#39;, class_=&#39;listmain&#39;)        bf2 = BeautifulSoup(str(texts[0]))        names = bf2.find_all(&#39;a&#39;)        real = names[12: len(names)-7]        self.count = len(real)        for name in real:            self.names.append(name.string)            self.urls.append(self.server + name.get(&#39;href&#39;))    &quot;&quot;&quot;    获取章节内容    &quot;&quot;&quot;    def get_every_content(self, target):        req = requests.get(url=target)        bf = BeautifulSoup(req.text)        texts = bf.find_all(&#39;div&#39;, class_=&#39;showtxt&#39;)        if len(texts) &gt; 0 and texts[0].text:            return texts[0].text.replace(&#39;\xa0&#39; * 8, &#39;\n&#39;)        else:            return &#39;&#39;    &quot;&quot;&quot;    写入文件    &quot;&quot;&quot;    def writer(self, path, name, text):        with open(path, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:            f.write(name + &#39;\n&#39;)            f.writelines(text)            f.write(&#39;\n\n&#39;)if __name__ == &#39;__main__&#39;:    obj = DownloadBook()    obj.get_all_down_url()    print(&#39;%s开始下载：&#39;, obj.name)    for i in range(obj.count):        obj.writer(obj.name, obj.names[i], obj.get_every_content(obj.urls[i]))        print(&#39;\r已下载：%.3f %%&#39; % float(i &#x2F; obj.count * 100), end=&#39;&#39;)    print(&#39;%s下载完成。&#39;, obj.name)</code></pre><br>结果如下：<br><img src="/2018/12/08/chu-shi-python-pa-qu-wang-ye-wen-zi-he-tu-pian/images/11.png" alt="结果" title="结果">  </p><p><br><br></p><h3><span id="2爬取彼岸桌面网站上的壁纸">2.爬取“<font color="#0099ff" face="微软雅黑"><a href="http://www.netbian.com/" target="_blank" rel="noopener">彼岸桌面</a></font>”网站上的壁纸</span></h3><p>代码如下：<br><pre><code> # __*__ coding:UTF-8 __*__import requestsimport osimport timefrom bs4 import BeautifulSoupfrom contextlib import closing&quot;&quot;&quot;下载 彼岸桌面 壁纸&quot;&quot;&quot;class DownloadPic(object):    def __init__(self):        self.server = &#39;http:&#x2F;&#x2F;www.netbian.com&#x2F;&#39;        self.target = &#39;http:&#x2F;&#x2F;www.netbian.com&#x2F;&#39;        self.img_server = &#39;http:&#x2F;&#x2F;img.netbian.com&#x2F;&#39;        self.urls = []      # 图片列表解析的地址        self.big_urls = []     # 图片的大图地址        self.real_urls = []     # 图片下载地址        self.names = []     # 图片名    &quot;&quot;&quot;    获取每页url集合    &quot;&quot;&quot;    def get_url_list(self):        req = requests.get(url=self.target)        bf = BeautifulSoup(req.text)        texts = bf.find_all(&#39;div&#39;, class_=&#39;list&#39;)        if len(texts) &lt;= 0:            return        else:            bf2 = BeautifulSoup(str(texts[0]))            urls = bf2.find_all(&#39;a&#39;)            for k in range(len(urls)):                if k % 2 == 0 and k != 4:       # 每个url重复，且第三个图片（即i=(4,5)时是广告）                    self.urls.append(self.server + urls[k].get(&#39;href&#39;))    &quot;&quot;&quot;    获取每张图片的 大图浏览页的地址    &quot;&quot;&quot;    def get_big_url(self):        for url in self.urls:            req = requests.get(url=url)            bf = BeautifulSoup(req.text)            texts = bf.find_all(&#39;div&#39;, class_=&#39;pic&#39;)            bf2 = BeautifulSoup(str(texts[0]))            urls = bf2.find_all(&#39;a&#39;)            self.big_urls.append(self.server + urls[0].get(&#39;href&#39;))    &quot;&quot;&quot;    获取图片的下载地址    &quot;&quot;&quot;    def get_real_urls(self):        for url in self.big_urls:            req = requests.get(url=url)            bf = BeautifulSoup(req.text)            texts = bf.find_all(&#39;td&#39;, align=&#39;left&#39;)            bf2 = BeautifulSoup(str(texts[0]))            urls = bf2.find_all(&#39;a&#39;)            self.real_urls.append(urls[0].get(&#39;href&#39;))            self.names.append(urls[0].get(&#39;title&#39;))    &quot;&quot;&quot;    下载图片    &quot;&quot;&quot;    def download(self):        path = os.path.abspath(&#39;.&#39;)        path2 = os.path.join(path, &#39;pic&#39;)        if os.path.isdir(path2):            pass        else:            os.mkdir(path2)        for j in range(len(self.real_urls)):            time.sleep(1)            pu = os.path.join(path2, self.names[j]+&#39;.jpg&#39;)            print(self.real_urls[j])            with closing(requests.get(url=self.real_urls[j], stream=True, verify=False)) as r:                with open(pu, &#39;ab+&#39;) as f:                    for chunk in r.iter_content(chunk_size=1024):                        if chunk:                            f.write(chunk)                            f.flush()if __name__ == &#39;__main__&#39;:    for i in range(3):  # 爬取3页        obj = DownloadPic()        if i &gt; 0:            index = i+1            obj.target = obj.target + &#39;index_&#39; + str(index) + &#39;.htm&#39;        else:            pass        obj.get_url_list()        obj.get_big_url()        obj.get_real_urls()        obj.download()</code></pre><br>结果如下：<br><img src="/2018/12/08/chu-shi-python-pa-qu-wang-ye-wen-zi-he-tu-pian/images/12.png" alt="结果" title="结果">  </p><p><br></p><p>问题：<br>  爬取的图片无法打开，经查看图片显示的大小仅1kb，无法打开；经查找发现是获取的图片路径有误，响应为403错误，程序不能正常解析导致。</p><p>Tip: 以上内容仅用于学习！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>初识python: 运行环境</title>
      <link href="/2018/12/04/chu-shi-python-yun-xing-huan-jing/"/>
      <url>/2018/12/04/chu-shi-python-yun-xing-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>此过程为<font face="微软雅黑">windows7</font>上的开发环境  </p><p>安装<font color="#0099ff" face="微软雅黑"><a href="https://www.anaconda.com/" target="_blank" rel="noopener">anaconda</a></font>(开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项)</p><p>用pip命令安装开发Web App需要的第三方库：<br>异步框架aiohttp：<pre><code>pip install aiohttp</code></pre> (下同)<br>前端模板引擎jinja2：pip3 install jinja2<br>MySQL的Python异步驱动程序aiomysql：pip3 install aiomysql</p><h3><span id="运行环境">运行环境</span></h3><p><font face="微软雅黑">virtualenv</font>：<br>每个应用可能需要各自拥有一套“独立”的Python运行环境。virtualenv就是用来为一个应用创建一套“隔离”的Python运行环境。<br><strong>1.安装虚拟运行环境  </strong><br><pre><code>pip install virtualenv</code></pre><br><strong>2.cd进入工作目录，创建虚拟运行环境</strong><br><pre><code>virtualenv --no-site-packages venv</code></pre><br> 参数<font color="#0099ff">–no-site-packages</font>表示不带任何第三方包的“干净”的Python运行环境<br> dir命令可以查看当前目录<br><strong>3.启动环境</strong><br>进入venv\Scripts下，执行activate.bat启动环境(call activate.bat)后就可以安装各种包了，执行deactivate.bat可以关闭环境</p><p>启动后，注意到命令提示符变了，有个(<font color="red">venv</font>)前缀，表示当前环境是一个名为<font color="red">venv</font>的Python环境。<br>在<font color="red">venv</font>环境下，用<font color="#0099ff">pip</font>安装的包都被安装到<font color="red">venv</font>这个环境下，系统Python环境不受任何影响。也就是说，<font color="red">venv</font>环境是专门针对这个应用创建的。<br>如果使用idea工具，如<font color="#0099ff">pycharm</font>等，以上步骤可以省略，创建项目勾选相应的选项后，会自动创建项目独立的运行环境</p><p><strong>问题与细节</strong><br>每次需要启动虚拟环境的时候都需要进入虚拟环境的文件夹的Scripy的目录下，非常不方便，可以将Scripts的路径添加到系统环境变量中。<br>如果系统还要安装其他的python版本，如python2.7.13；将其路径添加到系统环境变量后，进入安装文件目录，将python.exe文件改为python2.exe文件，防止命令冲突；<br>如果同时存在多个python版本，那么pip也有多个版本，这个时候使用pip安装需要指定python版本。<br><pre><code>  python -m pip install xxx   # python3版本安装包  python2 -m pip install xxx  # python2版本安装包  </code></pre><br>每次添加了系统环境变量以后，需要关闭当前的cmd窗口，重新启动一个窗口才会生效。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>easyui控件</title>
      <link href="/2018/11/26/easyui-shi-jian-kong-jian-xuan-ze-yue-fen/"/>
      <url>/2018/11/26/easyui-shi-jian-kong-jian-xuan-ze-yue-fen/</url>
      
        <content type="html"><![CDATA[<h3><span id="1easyui-datebox">1.easyui-datebox</span></h3><p>截止到目前的版本（<a href="http://www.jeasyui.com/demo/main/index.php?plugin=DateBox" target="_blank" rel="noopener">1.6.10</a>）,easyui并没有提供一种选择月份的时间控件，但是在项目中却会经常有此类需求。<br>下面提供一种解决办法，这种实现方式利用了easyui的onShowPanel、parser、formatter方法。</p><p>首先，写一个时间输入框：<br><code>&lt;input class=&quot;easyui-datebox&quot; id=&quot;monthSpan&quot; style=&quot;width:150px;&quot;data-options=&quot;editable:false&quot;&gt;</code><br>然后，在javascript代码中，加入：<br><pre><code> var p = $(&#39;#monthSpan&#39;).datebox(&#39;panel&#39;),tds = false,span = p.find(&#39;span.calendar-text&#39;);$(&#39;#monthSpan&#39;).datebox({    onShowPanel: function() {span.trigger(&#39;click&#39;);if (!tds)    setTimeout(function() {tds = p.find(&#39;div.calendar-menu-month-inner td&#39;);               tds.click(function(e) {                       e.stopPropagation();                var year = &#x2F;\d{4}&#x2F;.exec(span.html())[0], month = parseInt($(this).attr(&#39;abbr&#39;), 10) + 1;                       $(&#39;#monthSpan&#39;).datebox(&#39;hidePanel&#39;).datebox(&#39;setValue&#39;, year + &#39;-&#39; + month);               });    }, 0);    },    parser: function(s) {if (!s)        return new Date();        var arr = s.split(&#39;-&#39;);        return new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, 1);    },    formatter: function(d) {    var month = d.getMonth();  if(month&lt;=10){  month = &quot;0&quot;+month;  }  if (d.getMonth() == 0) {    return d.getFullYear()-1 + &#39;-&#39; + 12;    } else {    return d.getFullYear() + &#39;-&#39; + month;    }    }});   </code></pre>  </p><p>最终的效果如下图所示：<br><img src="/2018/11/26/easyui-shi-jian-kong-jian-xuan-ze-yue-fen/images/1126.png" alt="example" title="选择月份">   </p><h3><span id="2easyui-datetimebox">2.easyui-datetimebox</span></h3><p>下面修改控件默认的按钮事件：<br> 先写html：<br> <code>&lt;input id=&quot;beginTime&quot; class=&quot;easyui-datetimebox&quot;  editable=false /&gt;</code><br> 再写js事件：<br><pre><code>  setJinTianTime(&#39;#beginTime&#39;); function setJinTianTime(dom){var today = function (){    &#x2F;&#x2F;当前的时间    var dd = new Date();    var y = dd.getFullYear();      var m = dd.getMonth()+1;      var d = dd.getDate();     var str = y+&#39;-&#39;+(m&lt;10?(&#39;0&#39;+m):m)+&#39;-&#39;+(d&lt;10?(&#39;0&#39;+d):d)+&#39; 00:00:00&#39;;     return str; };var buttons = $.extend([], $.fn.datetimebox.defaults.buttons);buttons.splice(0, 1, {text: &#39;今天&#39;, handler: function(target){var date = today();$(target).datetimebox(&#39;setValue&#39;, date).datetimebox(&#39;setText&#39;, date).datetimebox(&quot;hidePanel&quot;);}});$(dom).datetimebox({buttons: buttons});}  </code></pre>   </p><h3><span id="3easyui-combogrid">3.easyui combogrid</span></h3><p> 定义多列搜索事件，例子如下：<br><pre><code> var startDevs = ...(先初始化数据);$(dom).combogrid({panelWidth:300,idField: &#39;deviceCode&#39;,textField: &#39;deviceName&#39;,columns:[[{field:&#39;deviceName&#39;,title:&#39;设备名称&#39;,width:200},{field:&#39;ip&#39;,title:&#39;设备IP&#39;,width:120}]],onSelect: function(rowIndex, rowData){ },keyHandler: {up: function(e){},down: function(e){},left: function(e){},right: function(e){},enter: function(e){if(e.keyCode == 13) {var value = $(e.target).val();doSearch(value, startDevs, [&quot;deviceName&quot;,&quot;ip&quot;], $(this));}},query: function(q,e){}}});&#x2F;&#x2F;加载静态数据$(dom).combogrid(&quot;grid&quot;).datagrid(&#39;loadData&#39;, startDevs);  &#x2F;&#x2F;搜索名称和ipfunction doSearch(q, data, searchList, ele){ele.combogrid(&#39;grid&#39;).datagrid(&#39;loadData&#39;, []);if(q == &quot;&quot;){ele.combogrid(&#39;grid&#39;).datagrid(&#39;loadData&#39;, data);return;}var rows = [];$.each(data, function(i, obj){for(var p in searchList){var v = obj[searchList[p]];if (!!v &amp;&amp; v.toString().indexOf(q) &gt;= 0){rows.push(obj);break;}}});ele.combogrid(&#39;grid&#39;).datagrid(&#39;loadData&#39;, rows);ele.combogrid(&#39;showPanel&#39;);}</code></pre></p>]]></content>
      
      
      <categories>
          
          <category> easyui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyui </tag>
            
            <tag> datebox </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>easyui遮罩</title>
      <link href="/2018/11/23/easyui-zhe-zhao/"/>
      <url>/2018/11/23/easyui-zhe-zhao/</url>
      
        <content type="html"><![CDATA[<h3><span id="easyui的页面加载问题">easyui的页面加载问题</span></h3><p>在用easyui做页面的过程中，总是会出现页面加载慢，在显示一堆乱七八糟的没渲染的页面后，才显示正常。是否会有一种日了狗的感觉？！<br><img src="/2018/11/23/easyui-zhe-zhao/images/2016322722279139.jpg" alt="日了狗" title="日了狗"><br>此时，我们可以在页面上加上遮罩，页面加载完成之后，再显示。<br><img src="/2018/11/23/easyui-zhe-zhao/images/108f3e73c794eba2555d2834272f0836.gif" alt="loading" title="loading"><br>只需要在页面中引入一个js脚本就可以了，不需其他任何操作，脚本内容如下：<br><pre><code> &#x2F;&#x2F;获取浏览器页面可见高度和宽度 var _PageHeight = document.documentElement.clientHeight, _PageWidth = document.documentElement.clientWidth; &#x2F;&#x2F;计算loading框距离顶部和左部的距离（loading框的宽度为215px，高度为61px）var _LoadingTop = _PageHeight &gt; 61 ? (_PageHeight - 61) &#x2F; 2 : 0, _LoadingLeft = _PageWidth &gt; 215 ? (_PageWidth - 215) &#x2F; 2 : 0; &#x2F;&#x2F;加载gif地址var Loadimagerul=&quot;..&#x2F;commons&#x2F;img&#x2F;base_loading.gif&quot;;&#x2F;&#x2F;在页面未加载完毕之前显示的loading Html自定义内容var _LoadingHtml = &#39;&lt;div id=&quot;loadingDiv&quot;  style=&quot;position:absolute;left:0;width:100%;height:&#39; + _PageHeight +  &#39;px;top:0;background:#f3f8ff;opacity:1;filter:alpha(opacity=80);z-index:10000;&quot;&gt;&#39;+&#39;&lt;div style=&quot;position: absolute; cursor1: wait; left: &#39; + _LoadingLeft + &#39;px; top:&#39; + _LoadingTop + &#39;px; width:100px;; height: 57px; line-height: 57px; padding-left: 50px; &#39;+&#39;padding-right: 5px; background: #fff url(&#39;+Loadimagerul+&#39;) no-repeat scroll 5px 12px; border: 2px &#39;+&#39;solid #95B8E7; color: #696969; font-family:\&#39;Microsoft YaHei\&#39;;&quot;&gt;加载中...&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&#39;;&#x2F;&#x2F;呈现loading效果 document.write(_LoadingHtml);&#x2F;&#x2F;监听加载状态改变document.onreadystatechange = completeLoading; &#x2F;&#x2F;加载状态为complete时移除loading效果function completeLoading() {if (document.readyState == &quot;complete&quot;) { var loadingMask = document.getElementById(&#39;loadingDiv&#39;); loadingMask.parentNode.removeChild(loadingMask); } }</code></pre><br>有没有一种很容易的感觉？  </p><p>不过，需要注意的是：<br>当页面加载的内容过多时，页面停留在loading的时间会很长，影响体验；此时应该考虑使用懒加载。</p>]]></content>
      
      
      <categories>
          
          <category> easyui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyui </tag>
            
            <tag> 遮罩 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>服务器监控之zabbix</title>
      <link href="/2018/11/17/fu-wu-qi-jian-kong-zhi-zabbix/"/>
      <url>/2018/11/17/fu-wu-qi-jian-kong-zhi-zabbix/</url>
      
        <content type="html"><![CDATA[<p>前段时间有监控服务器主机、应用、交换机等的需求，所以对zabbix进行了学习，现在整理记录全过程。</p><h2><span id="1zabbix概述">1.zabbix概述</span></h2><p>Zabbix由以下几个组件构成：<br>1.1 zabbix_server: Zabbix server 是agent程序报告系统可用性、系统完整性和统计数据的核心组件，是所有配置信息、统计信息和操作数据的核心存储器。<br>1.2 Web界面:由php编写，是Zabbix Server的一部分，通常(使用SQLite需要，其他不是必须)跟Zabbix Server运行在同一台物理机器上。<br>1.3 Proxy代理服务器<br>Zabbix proxy 可以替Zabbix Server收集性能和可用性数据。Proxy代理服务器是Zabbix软件可选择部署的一部分；当然，Proxy代理服务器可以帮助单台Zabbix Server分担负载压力。<br>1.4 zabbix_agent监控代理<br>Zabbix agents部署在监控目标上，能够主动监控本地资源和应用程序，并将收集到的数据报告给Zabbix Server。<br>基本步骤: 创建主机（host）-&gt; 创建监控项(item) -&gt; 如果需要：监控项里创建触发器（trigger）-&gt; 告警动作（action）<br><a id="more"></a></p><h2><span id="2环境安装与配置">2.环境安装与配置</span></h2><h3><span id="21-环境准备">2.1 环境准备:</span></h3><pre><code>Centos6.5zabbix-3.4.13.tar.gz(server)phpnginx</code></pre><h3><span id="22-安装server">2.2 安装server:</span></h3><p>2.2.1 $ tar -zxvf zabbix-3.4.0.tar.gz<br>2.2.2 Create user account:<br>    <pre><code>groupadd --system zabbixuseradd --system -g zabbix -d &#x2F;usr&#x2F;lib&#x2F;zabbix -s &#x2F;sbin&#x2F;nologin -c &quot;Zabbix Monitoring System&quot; zabbix</code></pre><br>2.2.3 Create Zabbix database<br>    导入安装包下的数据库脚本（3个）<br>    source schema.sql, images.sql, data.sql<br>2.2.4 安装依赖<br>    net-snmp-devel  libxml2-devel  libcurl-devel ….<br>2.2.5 Configure the sources<br>    To configure the sources for a Zabbix server and agent, you may run something like:<br>    <pre><code>.&#x2F;configure --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2  --enable-java</code></pre><br>    <img src="/2018/11/17/fu-wu-qi-jian-kong-zhi-zabbix/images/image2.png" alt="Example image"><br>2.2.6 Make &amp;&amp; make install<br>    Running ‘make install’ will by default install the daemon binaries (zabbix_server, zabbix_agentd, zabbix_proxy) in /usr/local/sbin and the client binaries (zabbix_get, zabbix_sender) in /usr/local/bin.<br>Review and edit configuration files: /usr/local/etc/zabbix_server.conf<br>    <blockquote><p>#Database host name.<br>DBHost=localhost</p><p>#Database name. 必须<br>DBName=zabbix<br>DBPassword=123456<br>DBPort=3306<br>DBUser=zabbix<br>LogFile=/tmp/zabbix_server.log必须</p></blockquote><br>2.2.7 Start up the daemons<br>    zabbix_server<br>    <pre><code>cd &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;zabbix_java&#x2F;  .&#x2F;startup.sh</code></pre></p><h3><span id="23-zabbix_agent">2.3 zabbix_agent</span></h3><pre><code>a) linux1 配置/usr/local/etc/zabbix_agentd.conf    {% blockquote %}Server=121.42.111.220       ServerActive=127.0.0.1       Hostname=Linux1{% endblockquote %}2 cp /usr/zabbix/zabbix-3.4.13/misc/init.d/tru64/zabbix_agentd /etc/init.d/3 chmod +x /etc/init.d/zabbix_agentd4 启动     {% codeblock %}/etc/init.d/zabbix_agentd start{% endcodeblock %}b) windows1 配置zabbix agent.win.conf2 安装    {% codeblock %}E:\zabbix\bin\win64\zabbix_agentd.exe -i -c E:\zabbix\conf\zabbix_agentd.win.conf{% endcodeblock %}3 启动     {% codeblock %}E:\zabbix\bin\win64>zabbix_agentd.exe -c E:\zabbix\conf\zabbix_agentd.win.conf –s{% endcodeblock %}4   netstat -ano|findstr &quot;10050&quot;         tasklist|findstr &quot;10268&quot;</code></pre><h3><span id="24-zabbix_proxy">2.4 zabbix_proxy</span></h3><pre><code>1 {% codeblock %}./configure --prefix=/usr/local/zabbix_proxy --enable-proxy --enable-agent --with-mysql --with-net-snmp --with-libcurlmakemake install{% endcodeblock %}2 {% codeblock %}create database zabbix_proxy;grant all on zabbix_proxy.* to 'user'@'host' identified by 'password;flush privileges;mysql -hhostname -uuser -ppassword zabbix_proxy < zabbix-2.2.1/database/mysql/schema.sql{% endcodeblock %}3 zabbix_proxy.conf    {% blockquote %}Server=IP　　#zabbix服务端IPHostname=Zabbix_proxy　　#必须和WEB页面添加代理时设置的名称一致LogFile=/tmp/zabbix_proxy.logDBHost=IP　　#数据库IPDBName=zabbix_proxy　　数据库名DBUser=user　　#数据库用户名DBPassword=password　　#数据库密码{% endblockquote %}4 启动 /usr/local/zabbix_proxy/sbin/zabbix_proxy5 在zabbix web页面添加代理;    在proxy服务器上面测试,    {% codeblock %}/usr/local/zabbix_agentd/bin/zabbix_get -s IP -k agent.ping{% endcodeblock %}</code></pre><h3><span id="25-安装nginx">2.5 安装nginx:</span></h3><pre><code>1 {% codeblock %}./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre{% endcodeblock %}![Example image](images/image3.png)2 {% codeblock %}make make install{% endcodeblock %}3 启动  /usr/local/nginx/sbin/nginx4 访问 curl -s http://localhost | grep nginx.com5 停止 /usr/local/nginx/sbin/nginx -s stop6      /usr/local/nginx/sbin/nginx -s reload    ![Example image](images/image4.png)    ![Example image](images/image5.png)7 修改nginx的配置文件，在server里加上：    {% codeblock %}location /ngx_status {stub_status on;access_log off;allow 127.0.0.1;allow 192.168.137.1;}location ~ \.php$ {            root           /data/site/monitor.ttlsa.com/zabbix;            fastcgi_pass   127.0.0.1:9000;            fastcgi_index  zabbix.php;            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;            include        fastcgi_params;        }        location ~* ^.+\.(ico|gif|jpg|jpeg|png|html|css|htm|bmp|js|svg)$ {            root           /data/site/monitor.ttlsa.com/zabbix;        }{% endcodeblock %}8 http://192.168.137.128/ngx_status    ![Example image](images/image6.png)</code></pre><h3><span id="26-安装php">2.6 安装Php:</span></h3><pre><code>1 依赖 gd-devel libjpeg-devel libpng-devel libxml2-devel bzip2-devel libcurl-devel    tar –zxvf php-7.2.9.tar.gz    ./configure --prefix=/usr/local/php \        --with-config-file-path=/usr/local/php/etc --with-bz2 --with-curl \        --enable-ftp --enable-sockets --disable-ipv6 --with-gd \        --with-jpeg-dir=/usr/local --with-png-dir=/usr/local \        --with-freetype-dir=/usr/local --enable-gd-native-ttf \        --with-iconv-dir=/usr/local --enable-mbstring --enable-calendar \        --with-gettext --with-libxml-dir=/usr/local --with-zlib \        --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --with-mysql=mysqlnd \        --enable-dom --enable-xml --enable-fpm --with-libdir=lib64 --enable-bcmath \        --with-ldap    ![Example image](images/image7.png)2 配置：    {% blockquote %}#复制php配置文件到安装目录cp php.ini-production /usr/local/php/etc/php.iniln -s /usr/local/php/etc/php.ini  /etc/php.inils -l /etc/php.ini#复制模板文件为php-fpm配置cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.confln -s /usr/local/php/etc/php-fpm.conf  /etc/php-fpm.conf#复制php-fpm到启动目录cp /usr/php/php-7.2.9/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpmls -l /etc/init.d/php-fpm#赋予php-fpm执行权限chmod 755 /etc/init.d/php-fpm#设置php-fpm开机启动chkconfig php-fpm onchkconfig --list php-fpm#编辑php配置文件php.inivim /usr/local/php/etc/php.inidisable_functions=passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd,posix_getegid,posix_geteuid,posix_getgid,posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid,posix_getppid,posix_getpwnam,posix_getpwuid,posix_getrlimit,posix_getsid,posix_getuid,posix_isatty,posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid,posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname启动 /usr/local/php/sbin/php-fpm(注意：需要 php-fpm.d下 cp www.conf.default www.conf)eg: whereis php{% endblockquote %}![Example image](images/image8.png)![Example image](images/image9.png)</code></pre><h3><span id="27-zabbix前端">2.7 zabbix前端</span></h3><pre><code>{% blockquote %}1 拷贝前端文件mkdir /data/logs/nginxmkdir /data/site/monitor.ttlsa.com/zabbixcp -rp frontends/php/* /data/site/monitor.ttlsa.com/zabbixphp 配置http://192.168.137.128/info.phpzabbix前端：http://192.168.137.128/setup.php 出错直接到php源码把抛出异常的地方注释掉貌似没什么问题？编译时参数加入了php配置路径，Loaded Configuration File还是找不到，然后通过跟踪strace /usr/local/php/sbin/php-fpm -i 2>1.logmv php.ini /usr/local/php-5.5.0/etc/  解决，，nginx配置（后面那个不加的话，页面访问只有纯文字）2 编译安装php的过程中报错：第一个报错：configure: error: Cannot find ldap.hyum install openldap openldap-devel  -y第二个报错：configure: error: Cannot find ldap libraries in /usr/libcp -frp /usr/lib64/libldap* /usr/lib/然后再 ./configure  --with-php-config=/usr/local/php/bin/php-config  --with-ldap{% endblockquote %}![Example image](images/image10.png)![Example image](images/image11.png)</code></pre><h3><span id="28-调用api获取数据">2.8 调用api获取数据：</span></h3><pre><code>curl -X POST -H &quot;Content-Type&quot;:application/json-rpc --data &#39;{&quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;:&quot;apiinfo.version&quot;, &quot;id&quot;:1, &quot;auth&quot;:null, &quot;params&quot;:{}}&#39; http://192.168.137.128/api_jsonrpc.php</code></pre><h2><span id="3-tomcat监控">3 tomcat监控</span></h2><pre><code>在tomcat目录下放入catalina-jmx-remote-xx.jar在bin目录下创建文件setenv.bat：set &quot;JAVA_OPTS=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=12345  -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=192.168.3.131&quot;</code></pre><h2><span id="4-windows-mysql监控">4 Windows mysql监控</span></h2><pre><code>mysql.ping.vbs{% codeblock %}Set objFS =CreateObject("Scripting.FileSystemObject")Set objArgs = WScript.Argumentsstr1 = getCommandOutput("C:\Program Files\MySQL\MySQL Server 5.7\bin\mysqladmin-uroot -p'123456' ping")  If Instr(str1,"alive") > 0 ThenWScript.Echo 1ElseWScript.Echo 0End If Function getCommandOutput(theCommand) Dim objShell, objCmdExecSet objShell =CreateObject("WScript.Shell")Set objCmdExec = objshell.exec(thecommand)getCommandOutput =objCmdExec.StdOut.ReadAllend Function{% endcodeblock %}MYSQL-status.vbs{% codeblock %}Set objFS = CreateObject("Scripting.FileSystemObject")Set objArgs = WScript.Argumentsstr1 = getCommandOutput("C:\Program Files\MySQL\MySQL Server 5.7\bin\mysqladmin-uroot -p'123456' extended-status") Arg = objArgs(0)str2 = Split(str1,"|") For i = LBound(str2) to UBound(str2) If Trim(str2(i)) = Arg Then   WScript.Echo TRIM(str2(i+1))Exit ForEnd Ifnext Function getCommandOutput(theCommand) Dim objShell, objCmdExecSet objShell =CreateObject("WScript.Shell")Set objCmdExec = objshell.exec(thecommand)getCommandOutput =objCmdExec.StdOut.ReadAll end Function{% endcodeblock %}mysql_version.vbs{% codeblock %}Set objFS = CreateObject("Scripting.FileSystemObject")Set objArgs = WScript.Argumentsstr1 = getCommandOutput("C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql.exe -V")WScript.Echo str1Function getCommandOutput(theCommand)Dim objShell, objCmdExecSet objShell = CreateObject("WScript.Shell")Set objCmdExec = objshell.exec(thecommand)getCommandOutput = objCmdExec.StdOut.ReadAllend Function{% endcodeblock %}修改zabbix_agentd.win.conf{% codeblock %}UnsafeUserParameters=1UserParameter=mysql.version, cscript /nologo  E:\zabbix_agent\scripts\mysql_version.vbsUserParameter=mysql.status[*], cscript /nologo E:\zabbix_agent\scripts\MYSQL-status.vbs $1 UserParameter=mysql.ping, cscript /nologo E:\zabbix_agent\scripts\mysql_ping.vbs{% endcodeblock %}</code></pre><h2><span id="5-linux-mysql-监控">5 linux mysql 监控：</span></h2><pre><code>找到mysql目录：find / -name mysqladmin    (userparameter_mysql.conf)cd /usr/local/zabbix/etc  vi .my.cnf{% codeblock %}[client]user=roothost=192.168.3.230password=123456{% endcodeblock %}vi /usr/local/zabbix/etc/zabbix_agentd.conf{% codeblock %}#UserParameter=mysql.status[*],echo "show global status where Variable_name='$1';" | HOME=/var/lib/zabbix mysql -N | awk '{print $$2}'UserParameter=mysql.status[*],/usr/local/zabbix/etc/chk_mysql.sh $1 UserParameter=mysql.size[*],bash -c 'echo "select sum($(case "$3" in both|"") echo "data_length+index_length";; data|index) echo "$3_length";; free) echo "data_free";; esac)) from information_schema.tables$([[ "$1" = "all" || ! "$1" ]] || echo " where table_schema=\"$1\"")$([[ "$2" = "all" || ! "$2" ]] || echo "and table_name=\"$2\"");" | /usr/bin/mysql -uroot -p123456 -N'UserParameter=mysql.ping, /usr/bin/mysqladmin -uroot -p123456 ping | grep -c aliveUserParameter=mysql.version, /usr/bin/mysql -uroot -p123456 –V{% endcodeblock %}将以上mysql路径改为HOME=/usr/local/zabbix/etc, 例如：UserParameter=mysql.ping,HOME=/var/lib/zabbix mysqladmin ping | grep -c aliveVi chk_mysql.sh{% codeblock %}#!/bin/bash# 用户名MYSQL_USER='root'# 密码MYSQL_PWD='123456'# 主机地址/IPMYSQL_HOST='192.168.3.230'# 端口MYSQL_PORT='3306'# 数据连接MYSQL_CONN="/usr/bin/mysqladmin -u${MYSQL_USER} -p${MYSQL_PWD} -h${MYSQL_HOST} -P${MYSQL_PORT}"# 参数是否正确if [ $# -ne "1" ];then echo "arg error!" fi # 获取数据case $1 in     Uptime)         result=`${MYSQL_CONN} status 2>/dev/null |cut -f2 -d":"|cut -f1 -d"T"`         echo $result         ;;     Com_update)         result=`${MYSQL_CONN} extended-status 2>/dev/null |grep -w "Com_update"|cut -d"|" -f3`         echo $result         ;;     Slow_queries)         result=`${MYSQL_CONN} status 2>/dev/null |cut -f5 -d":"|cut -f1 -d"O"`         echo $result         ;;     Com_select)         result=`${MYSQL_CONN} extended-status 2>/dev/null |grep -w "Com_select"|cut -d"|" -f3`         echo $result                 ;;     Com_rollback)         result=`${MYSQL_CONN} extended-status 2>/dev/null |grep -w "Com_rollback"|cut -d"|" -f3`                 echo $result                 ;;     Questions)         result=`${MYSQL_CONN} status 2>/dev/null |cut -f4 -d":"|cut -f1 -d"S"`                 echo $result                 ;;     Com_insert)         result=`${MYSQL_CONN} extended-status 2>/dev/null |grep -w "Com_insert"|cut -d"|" -f3`                 echo $result                 ;;     Com_delete)         result=`${MYSQL_CONN} extended-status 2>/dev/null |grep -w "Com_delete"|cut -d"|" -f3`                 echo $result                 ;;     Com_commit)         result=`${MYSQL_CONN} extended-status 2>/dev/null |grep -w "Com_commit"|cut -d"|" -f3`                 echo $result                 ;;     Bytes_sent)         result=`${MYSQL_CONN} extended-status 2>/dev/null |grep -w "Bytes_sent" |cut -d"|" -f3`                 echo $result                 ;;     Bytes_received)         result=`${MYSQL_CONN} extended-status 2>/dev/null |grep -w "Bytes_received" |cut -d"|" -f3`                 echo $result                 ;;     Com_begin)         result=`${MYSQL_CONN} extended-status 2>/dev/null |grep -w "Com_begin"|cut -d"|" -f3`                 echo $result                 ;;         *)         echo "Usage:$0(Uptime|Com_update|Slow_queries|Com_select|Com_rollback|Questions|Com_insert|Com_delete|Com_commit|Bytes_sent|Bytes_received|Com_begin)"         ;; esac{% endcodeblock %}chmod +x chk_mysql.sh</code></pre><h2><span id="6-附我监控用的一些脚本">6 附：我监控用的一些脚本</span></h2><pre><code>linux(centos6.5x64):    vi zabbix_agentd.conf    UserParameter=mysql.status[*],/usr/local/zabbix/etc/chk_mysql.sh $1    UserParameter=mysql.Threads,HOME=/usr/local/zabbix/etc mysqladmin status|cut -f3 -d&quot;:&quot;|cut -f1 -d&quot;Q&quot;    UserParameter=mysql.Qps,HOME=/usr/local/zabbix/etc mysqladmin  status|cut -f9 -d&quot;:&quot;    UserParameter=mysql.Key_buffer_size,HOME=/usr/local/zabbix/etc mysql  -e &quot;show variables like &#39;key_buffer_size&#39;;&quot;| grep -v Value |awk &#39;{print $2/1024^2}&#39;    UserParameter=mysql.Key_cache_miss_rate,echo $(HOME=/usr/local/zabbix/etc mysql  -e &quot;show status like &#39;key_reads&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;) $(HOME=/usr/local/zabbix/etc mysql  -e &quot;show status like &#39;key_read_requests&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;)| awk &#39;{printf(&quot;%1.4f\n&quot;,$1/$2*100)}&#39;    UserParameter=mysql.Key_blocks_used_rate,echo $(HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;key_blocks_used&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;) $(HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;key_blocks_unused&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;)| awk &#39;{printf(&quot;%1.4f\n&quot;,$1/($1+$2)*100)}&#39;    UserParameter=mysql.Innodb_buffer_pool_size,HOME=/usr/local/zabbix/etc mysql -e &quot;show variables like &#39;innodb_buffer_pool_size&#39;;&quot;| grep -v Value |awk &#39;{print $2/1024^2}&#39;    UserParameter=mysql.Threads_connected,HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;Threads_connected&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;    UserParameter=mysql.Table_open_cache_used_rate,echo $(HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;open_tables&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;) $(HOME=/usr/local/zabbix/etc mysql -e &quot;show variables like &#39;table_open_cache&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;)| awk &#39;{printf(&quot;%1.4f\n&quot;,$1/($1+$2)*100)}&#39;    UserParameter=mysql.Qcache_used_rate,echo $(HOME=/usr/local/zabbix/etc mysql -e &quot;show variables like &#39;query_cache_size&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;) $(HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;Qcache_free_memory&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;)| awk &#39;{printf(&quot;%1.4f\n&quot;,($1-$2)/$1*100)}&#39;    UserParameter=mysql.Qcache_fragment_rate,echo $(HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;Qcache_free_blocks&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;) $(HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;Qcache_total_blocks&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;)| awk &#39;{printf(&quot;%1.4f\n&quot;,$1/$2*100)}&#39;    UserParameter=mysql.Max_used_connections,HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;Max_used_connections&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;UserParameter=mysql.Qcache_hits_rate,echo $(HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;Qcache_hits&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;) $(HOME=/usr/local/zabbix/etc mysql -e &quot;show status like &#39;Qcache_inserts&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;)| awk &#39;{printf(&quot;%1.4f\n&quot;,($1-$2)/$1*100)}&#39;UserParameter=mysql.Open_files_rate, $(HOME=/usr/local/zabbix/etc mysql -e &quot;show global status like &#39;open_files&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;) $(HOME=/usr/local/zabbix/etc mysql -e &quot;show variables like &#39;open_files_limit&#39;;&quot;| grep -v Value |awk &#39;{print $2}&#39;)| awk &#39;{printf(&quot;%1.4f\n&quot;,$1/$2*100)}&#39;    UserParameter=mysql.Ping,HOME=/usr/local/zabbix/etc mysqladmin  ping|grep alive|wc -l    UserParameter=mysql.version, HOME=/usr/local/zabbix/etc mysql -V    UserParameter=discovery.processlist,/usr/local/zabbix/etc/discovery_process.sh    UserParameter=discovery.process,/usr/local/zabbix/etc/discovery_process.sh    UserParameter=process.check[*],/usr/local/zabbix/etc/process_check.sh $1 $2 $3    vi .my.cnf    [client]    user=root    host=192.168.3.230    password=123456    vi chk_mysql.sh    #!/bin/bash    # 用户名    MYSQL_USER=&#39;root&#39;    # 密码    MYSQL_PWD=&#39;123456&#39;    # 主机地址/IP    MYSQL_HOST=&#39;192.168.3.230&#39;    # 端口    MYSQL_PORT=&#39;3306&#39;    # 数据连接    MYSQL_CONN=&quot;/usr/bin/mysqladmin -u${MYSQL_USER} -p${MYSQL_PWD} -h${MYSQL_HOST} -P${MYSQL_PORT}&quot;    # 参数是否正确    if [ $# -ne &quot;1&quot; ];then        echo &quot;arg error!&quot;    fi    # 获取数据    case $1 in        Uptime)            result=`${MYSQL_CONN} status 2&gt;/dev/null|cut -f2 -d&quot;:&quot;|cut -f1 -d&quot;T&quot;`            echo $result            ;;        Com_update)            result=`${MYSQL_CONN} extended-status 2&gt;/dev/null|grep -w &quot;Com_update&quot;|cut -d&quot;|&quot; -f3`            echo $result            ;;        Slow_queries)            result=`${MYSQL_CONN} status 2&gt;/dev/null|cut -f5 -d&quot;:&quot;|cut -f1 -d&quot;O&quot;`            echo $result            ;;        Com_select)            result=`${MYSQL_CONN} extended-status 2&gt;/dev/null|grep -w &quot;Com_select&quot;|cut -d&quot;|&quot; -f3`            echo $result                    ;;        Com_rollback)            result=`${MYSQL_CONN} extended-status 2&gt;/dev/null|grep -w &quot;Com_rollback&quot;|cut -d&quot;|&quot; -f3`                    echo $result                    ;;        Questions)            result=`${MYSQL_CONN} status 2&gt;/dev/null|cut -f4 -d&quot;:&quot;|cut -f1 -d&quot;S&quot;`                    echo $result                    ;;        Com_insert)            result=`${MYSQL_CONN} extended-status 2&gt;/dev/null|grep -w &quot;Com_insert&quot;|cut -d&quot;|&quot; -f3`                    echo $result                    ;;        Com_delete)            result=`${MYSQL_CONN} extended-status 2&gt;/dev/null|grep -w &quot;Com_delete&quot;|cut -d&quot;|&quot; -f3`                    echo $result                    ;;        Com_commit)            result=`${MYSQL_CONN} extended-status 2&gt;/dev/null|grep -w &quot;Com_commit&quot;|cut -d&quot;|&quot; -f3`                    echo $result                    ;;        Bytes_sent)            result=`${MYSQL_CONN} extended-status 2&gt;/dev/null|grep -w &quot;Bytes_sent&quot; |cut -d&quot;|&quot; -f3`                    echo $result                    ;;        Bytes_received)            result=`${MYSQL_CONN} extended-status 2&gt;/dev/null|grep -w &quot;Bytes_received&quot; |cut -d&quot;|&quot; -f3`                    echo $result                    ;;        Com_begin)            result=`${MYSQL_CONN} extended-status 2&gt;/dev/null|grep -w &quot;Com_begin&quot;|cut -d&quot;|&quot; -f3`                    echo $result                    ;;            *)            echo &quot;Usage:$0(Uptime|Com_update|Slow_queries|Com_select|Com_rollback|Questions|Com_insert|Com_delete|Com_commit|Bytes_sent|Bytes_received|Com_begin)&quot;            ;;    esac    vi discovery_process.sh    #!/bin/bash    #system process discovery script    top -b -n 1 &gt; /tmp/.top.txt &amp;&amp; chown zabbix. /tmp/.top.txt    proc_array=(`tail -n +8 /tmp/.top.txt | awk &#39;{a[$NF]+=$10}END{for(k in a)print a[k],k}&#39;|sort -gr|head -10|cut -d&quot; &quot; -f2`)    length=${#proc_array[@]}    printf &quot;{\n&quot;    printf &#39;\t&#39;&quot;\&quot;data\&quot;:[&quot;    for ((i=0;i&lt;$length;i++))    do        printf &quot;\n\t\t{&quot;        printf &quot;\&quot;{#PROCESS_NAME}\&quot;:\&quot;${proc_array[$i]}\&quot;}&quot;        if [ $i -lt $[$length-1] ];then            printf &quot;,&quot;        fi    done        printf &quot;\n\t]\n&quot;    printf &quot;}\n&quot;    vi process_check.sh    #!/bin/bash    #system process CPU&amp;MEM use information    #mail: mail@huangming.org    mode=$1    name=$2    process=$3    mem_total=$(cat /proc/meminfo | grep &quot;MemTotal&quot; | awk &#39;{printf &quot;%.f&quot;,$2/1024}&#39;)    cpu_total=$(( $(cat /proc/cpuinfo | grep &quot;processor&quot; | wc -l) * 100 ))    function mempre {        mem_pre=`tail -n +8 /tmp/.top.txt | awk &#39;{a[$NF]+=$10}END{for(k in a)print a[k],k}&#39; | grep &quot;\b${process}\b&quot; | cut -d&quot; &quot; -f1`        echo &quot;$mem_pre&quot;    }    function memuse {        mem_use=`tail -n +8 /tmp/.top.txt | awk &#39;{a[$NF]+=$10}END{for(k in a)print a[k]/100*&#39;&#39;&#39;${mem_total}&#39;&#39;&#39;,k}&#39; | grep &quot;\b${process}\b&quot; | cut -d&quot; &quot; -f1`        echo &quot;$mem_use&quot; | awk &#39;{printf &quot;%.f&quot;,$1*1024*1024}&#39;    }    function cpuuse {        cpu_use=`tail -n +8 /tmp/.top.txt | awk &#39;{a[$NF]+=$9}END{for(k in a)print a[k],k}&#39; | grep &quot;\b${process}\b&quot; | cut -d&quot; &quot; -f1`        echo &quot;$cpu_use&quot;    }    function cpupre {        cpu_pre=`tail -n +8 /tmp/.top.txt | awk &#39;{a[$NF]+=$9}END{for(k in a)print a[k]/(&#39;&#39;&#39;${cpu_total}&#39;&#39;&#39;),k}&#39; | grep &quot;\b${process}\b&quot; | cut -d&quot; &quot; -f1`        echo &quot;$cpu_pre&quot;    }    case $name in        mem)            if [ &quot;$mode&quot; = &quot;pre&quot; ];then                mempre            elif [ &quot;$mode&quot; = &quot;avg&quot; ];then                memuse            fi        ;;        cpu)            if [ &quot;$mode&quot; = &quot;pre&quot; ];then                cpupre            elif [ &quot;$mode&quot; = &quot;avg&quot; ];then                cpuuse            fi        ;;        *)            echo -e &quot;Usage: $0 [mode : pre|avg] [mem|cpu] [process]&quot;    esac    windows(win10x64):    zabbix_agentd.win.conf -&gt;    #mysql状态数据    UserParameter=mysql.version, cscript /nologo  E:\zabbix_agent\scripts\mysql_version.vbs    UserParameter=mysql.status[*], cscript /nologo E:\zabbix_agent\scripts\MYSQL-status.vbs $1     #mysql性能数据    UserParameter=mysql.xn[*], cscript /nologo E:\zabbix_agent\scripts\mysql_xn.vbs $1    #系统进程列表    UserParameter=process.list, cscript /nologo E:\zabbix_agent\scripts\process_list.vbs    mysql_version.vbs -&gt;    Set objFS = CreateObject(&quot;Scripting.FileSystemObject&quot;)    Set objArgs = WScript.Arguments    str1 = getCommandOutput(&quot;C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql.exe -V&quot;)    WScript.Echo str1    Function getCommandOutput(theCommand)    Dim objShell, objCmdExec    Set objShell = CreateObject(&quot;WScript.Shell&quot;)    Set objCmdExec = objshell.exec(thecommand)    getCommandOutput = objCmdExec.StdOut.ReadAll    end Function    MYSQL-status.vbs -&gt;    Set objFS = CreateObject(&quot;Scripting.FileSystemObject&quot;)    Set objArgs = WScript.Arguments    str1 = getCommandOutput(&quot;C:\Program Files\MySQL\MySQL Server 5.7\bin\mysqladmin-uroot -p123456 extended-status&quot;)     Arg = objArgs(0)    str2 = Split(str1,&quot;|&quot;)    For i = LBound(str2) to UBound(str2)    If Trim(str2(i)) = Arg Then       WScript.Echo TRIM(str2(i+1))    Exit For    End If    next    Function getCommandOutput(theCommand)    Dim objShell, objCmdExec    Set objShell =CreateObject(&quot;WScript.Shell&quot;)    Set objCmdExec = objshell.exec(thecommand)    getCommandOutput =objCmdExec.StdOut.ReadAll    end Function    mysql_xn.vbs -&gt;    Set objFS = CreateObject(&quot;Scripting.FileSystemObject&quot;)    Set objArgs = WScript.Arguments    Arg = objArgs(0)    &#39;已创建线程数    If &quot;Threads&quot; = Arg Then        str1 = getCommandOutput1(&quot; status&quot;)         str2 = Split(str1,&quot;  &quot;)         For i = LBound(str2) to UBound(str2)        str3 = Split(Trim(str2(i)),&quot;:&quot;)        If Trim(str3(0)) = &quot;Threads&quot; Then           WScript.Echo CINT(TRIM(str3(1)))        Exit For        End If        next    &#39;索引缓存未命中率    ElseIf &quot;Key_cache_miss_rate&quot; = Arg Then        str1 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;key_reads&#39;;&quot;&quot;&quot;)         str1_1 = Split(CStr(str1), &quot;Key_reads&quot;)        str1_2 = CINT(Trim(str1_1(1)))            str2 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;key_read_requests&#39;;&quot;&quot;&quot;)        str2_1 = Split(CStr(str2), &quot;Key_read_requests&quot;)        str2_2 = CINT(Trim(str2_1(1)))        WScript.Echo formatnumber(str1_2/str2_2*100,4,true)     &#39;缓存簇使用率    ElseIf &quot;Key_blocks_used_rate&quot; = Arg Then        str1 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;key_blocks_used&#39;;&quot;&quot;&quot;)         str1_1 = Split(CStr(str1), &quot;Key_blocks_used&quot;)        str1_2 = CINT(Trim(str1_1(1)))        str2 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;key_blocks_unused&#39;;&quot;&quot;&quot;)         str2_1 = Split(CStr(str2), &quot;Key_blocks_unused&quot;)        str2_2 = CINT(Trim(str2_1(1)))        WScript.Echo formatnumber(str1_2/(str1_2+str2_2)*100,4,true)    &#39;当前链接数    ElseIf &quot;Threads_connected&quot; = Arg Then        str1 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;Threads_connected&#39;;&quot;&quot;&quot;)         str1_1 = Split(CStr(str1), &quot;Threads_connected&quot;)        str1_2 = CINT(Trim(str1_1(1)))        WScript.Echo str1_2    &#39;表缓存利用率    ElseIf &quot;Table_open_cache_used_rate&quot; = Arg Then        str1 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;open_tables&#39;;&quot;&quot;&quot;)         str1_1 = Split(CStr(str1), &quot;Open_tables&quot;)        str1_2 = CINT(Trim(str1_1(1)))        str2 = getCommandOutput(&quot;-e &quot;&quot;show variables like &#39;table_open_cache&#39;;&quot;&quot;&quot;)         str2_1 = Split(CStr(str2), &quot;table_open_cache&quot;)        str2_2 = CINT(Trim(str2_1(1)))        WScript.Echo formatnumber(str1_2/(str1_2+str2_2)*100,4,true)    &#39;查询缓存利用率    ElseIf &quot;Qcache_used_rate&quot; = Arg Then        str1 = getCommandOutput(&quot;-e &quot;&quot;show variables like &#39;query_cache_size&#39;;&quot;&quot;&quot;)         str1_1 = Split(CStr(str1), &quot;query_cache_size&quot;)        str1_2 = CINT(Trim(str1_1(1)))        If str1_2 = 0 Then         WScript.Echo 0        Else         str2 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;Qcache_free_memory&#39;;&quot;&quot;&quot;)         str2_1 = Split(CStr(str2), &quot;Qcache_free_memory&quot;)        str2_2 = CINT(Trim(str2_1(1)))        WScript.Echo formatnumber((str1_2-str2_2)/str1_2*100,4,true)        End If    &#39;查询缓存碎片率    ElseIf &quot;Qcache_fragment_rate&quot; = Arg Then        str1 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;Qcache_free_blocks&#39;;&quot;&quot;&quot;)         str1_1 = Split(CStr(str1), &quot;Qcache_free_blocks&quot;)        str1_2 = CINT(Trim(str1_1(1)))        If str1_2 = 0 Then        WScript.Echo 0        Else         str2 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;Qcache_total_blocks&#39;;&quot;&quot;&quot;)         str2_1 = Split(CStr(str2), &quot;Qcache_total_blocks&quot;)        str2_2 = CINT(Trim(str2_1(1)))        WScript.Echo formatnumber(str1_2/str2_2*100,4,true)        End If    &#39;最大响应链接数    ElseIf &quot;Max_used_connections&quot; = Arg Then        str1 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;Max_used_connections&#39;;&quot;&quot;&quot;)         str1_1 = Split(CStr(str1), &quot;Max_used_connections&quot;)        str1_2 = CINT(Trim(str1_1(1)))        WScript.Echo str1_2    &#39;查询缓存命中率    ElseIf &quot;Qcache_hits_rate&quot; = Arg Then        str1 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;Qcache_hits&#39;;&quot;&quot;&quot;)         str1_1 = Split(CStr(str1), &quot;Qcache_hits&quot;)        str1_2 = CINT(Trim(str1_1(1)))        If str1_2 = 0 Then        WScript.Echo 0        Else         str2 = getCommandOutput(&quot;-e &quot;&quot;show status like &#39;Qcache_inserts&#39;;&quot;&quot;&quot;)         str2_1 = Split(CStr(str2), &quot;Qcache_inserts&quot;)        str2_2 = CINT(Trim(str2_1(1)))        WScript.Echo formatnumber((str1_2-str2_2)/str1_2*100,4,true)        End If    &#39;文件使用率    ElseIf &quot;Open_files_rate&quot; = Arg Then        str1 = getCommandOutput(&quot;-e &quot;&quot;show global status like &#39;open_files&#39;;&quot;&quot;&quot;)         str1_1 = Split(CStr(str1), &quot;Open_files&quot;)        str1_2 = CINT(Trim(str1_1(1)))        str2 = getCommandOutput(&quot;-e &quot;&quot;show variables like &#39;open_files_limit&#39;;&quot;&quot;&quot;)         str2_1 = Split(CStr(str2), &quot;open_files_limit&quot;)        str2_2 = CINT(Trim(str2_1(1)))        WScript.Echo formatnumber(str1_2/str2_2*100,4,true)    ElseIf &quot;Ping&quot; = Arg Then        str1 = getCommandOutput1(&quot; ping&quot;)         If Instr(str1, &quot;alive&quot;) Then         WScript.Echo 1        Else         WScript.Echo 0        End If    End If    Function getCommandOutput1(theCommand)        Dim objShell, objCmdExec        Set objShell =CreateObject(&quot;WScript.Shell&quot;)        Set objCmdExec = objshell.exec(&quot;C:\Program Files\MySQL\MySQL Server 5.7\bin\mysqladmin -uroot -p123456 &quot; &amp; thecommand)        getCommandOutput1 =objCmdExec.StdOut.ReadAll    end Function    Function getCommandOutput(theCommand)        Dim objShell, objCmdExec        Set objShell =CreateObject(&quot;WScript.Shell&quot;)        Set objCmdExec = objshell.exec(&quot;C:\Program Files\MySQL\MySQL Server 5.7\bin\mysql -uroot -p123456 &quot; &amp; thecommand)        getCommandOutput =objCmdExec.StdOut.ReadAll    end Function    process_list.vbs -&gt;    Dim WMI,Objs,Process    Set WMI=GetObject(&quot;WinMgmts:&quot;)    Set Objs=WMI.InstancesOf(&quot;Win32_Process&quot;)    Process=&quot;&quot;    For Each Obj In Objs      Process=Process &amp; Obj.Description &amp; Chr(13) &amp; Chr(10)    Next    WScript.Echo Process</code></pre><h2><span id="7-监控硬件的一些脚本">7 监控硬件的一些脚本</span></h2><pre><code>    windows:    利用SpeedFan软件的日志监控；    cp_cpufan.vbs:    &#39;硬件信息    set fs =createobject(&quot;Scripting.FileSystemObject&quot;)    Set objArgs = WScript.Arguments    Arg = objArgs(0)    month1 = &quot;&quot; &amp; Month(Now)    if Len(month1)&lt;2 Then month1 = &quot;0&quot;&amp;month1 End If    day1 = day(Now)    if Len(day1)&lt;2 Then day1 = &quot;0&quot;&amp;day1 End If    dates = year(Now)&amp; month1 &amp; day1    set ts=fs.opentextfile(&quot;C:\Program Files (x86)\SpeedFan\SFLog&quot;&amp; dates &amp;&quot;.csv&quot;,1,true)    line=CStr(ts.read(100))    ts.close    &#39;日志记录为如下格式    &#39;Seconds GPU     CPU     Fan1    Fan2    &#39;48968   32.0    41.0    853     984    &#39;48970   32.0    41.0    853     984    ta = Split(line, vbcrlf)    tt = Split(ta(1), &quot;    &quot;)    If Arg = &quot;GPU_TEMP&quot; Then         WScript.Echo tt(1)    ElseIf Arg = &quot;CPU_TEMP&quot; Then         WScript.Echo tt(2)    ElseIf Arg = &quot;Fan1&quot; Then         WScript.Echo tt(3)    ElseIf Arg = &quot;Fan2&quot; Then         WScript.Echo tt(4)        End If    zabbix_agentd.win.conf:    UserParameter=hardware[*], cscript /nologo E:\zabbix_agent\scripts\cp_cpufan.vbs $1    Linux:    利用yum install lm_sensors；运行  sensors-detect　检测内核模块，在引导下直接enter，使用默认选项    检测结束后运行 sensors ，可以看到每颗CPU每个核心的温度    vi zabbix_agentd.conf:    UserParameter=get_temp_cpu[*],sensors|grep &quot;Physical id $1&quot;|cut -c 17-20</code></pre>]]></content>
      
      
      <categories>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
